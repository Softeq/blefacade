# This component demonstrates how to add an existing third-party library as a component
# to ESP-IDF build system.
#
# Since we are wrapping the library inside a component,
# the component has to be registered first:
idf_component_register()

# To build a third-party library, ExternalProject CMake module can be used.
# ExternalProject offers many features which are impossible to demonstrate
# in a single example. Please refer to its documentation for more info:
#   https://cmake.org/cmake/help/latest/module/ExternalProject.html
include(ExternalProject)

# Define the location where blefacade will be installed:
set(BLEFACADE_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/blefacade_install)

ExternalProject_Add(blefacade_proj
                    SOURCE_DIR ${BLEFACADE_ORIGIN_DIR}
                    CMAKE_ARGS
                    # Use the same CMake toolchain file as for the main project.
                    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}

                    # Pass the install directory to the subproject.
                    -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
                    -DBUILD_TESTING=FALSE
                    -DENABLE_BLE=TRUE
                    -DENABLE_SECURITY=TRUE
                    -DBUILD_ALL=FALSE


                    # These options are set so that Ninja immediately outputs
                    # the subproject build to the terminal. Otherwise it looks like the
                    # build process "hangs" while the subproject is being built.
                    USES_TERMINAL_DOWNLOAD TRUE
                    USES_TERMINAL_CONFIGURE TRUE
                    USES_TERMINAL_BUILD TRUE

                    # Specify the installation directory for the subproject
                    INSTALL_DIR ${BLEFACADE_INSTALL_DIR}
                    # Let CMake know that the library is generated by the subproject build step.
                    BUILD_BYPRODUCTS "${BLEFACADE_INSTALL_DIR}/lib/libsofteqblefacade.a"
                    )

add_prebuilt_library(blefacade_lib "${BLEFACADE_INSTALL_DIR}/lib/libsofteqblefacade.a"
# dependency on IDF's cxx component is added here:
PRIV_REQUIRES cxx)
target_include_directories(blefacade_lib INTERFACE 
                            "${BLEFACADE_INSTALL_DIR}/include/softeq/")
add_dependencies(blefacade_lib blefacade_proj)

# Link the imported library to the current component.
target_link_libraries(${COMPONENT_LIB} INTERFACE blefacade_lib)